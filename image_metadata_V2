#-------------------------------------------------------------------------------
# Name:                 Program for collecting image meta data
# Purpose:              This program is designed to collect the meta data information for an image ie its imageID, filename, extension, title, owner, liccence and security class. Then write a CSV with the information.
#
# Version History:      V1: Asks for Image metadata, writes csv, GUI, validation
#                       V2: Insert of drop down menus
#
# Author:               Yvette Tough
#
# Created:              12/10/2016
# Copyright:            (c) Yvette Tough 2016
# Licence:              CC
#-------------------------------------------------------------------------------
#!/usr/bin/env python

def main():
    pass

if __name__ == '__main__':
    main()


#import GUI library
from tkinter import *


#for Python V3 you must explicitely load the messagebox
import tkinter.messagebox

class Image:
    def __init__(self, image_ID, filename, extension, title, owner, licence, security_class):
        self.image_ID = image_ID
        self.filename = filename
        self.extension = extension
        self.title = title
        self.owner = owner
        self.licence = licence
        self.security_class = security_class

    def get_image_ID(self):
        return self.image_ID

    def get_filename(self):
        return self.filename

    def get_extension(self):
        return self.extension

    def get_title(self):
        return self.title

    def get_owner(self):
        return self.owner

    def get_licence(self):
        return self.licence

    def get_security_class(self):
        return self.security_class

# end of indenting means end of class definition


#create the GUI interface
class GUI:
    def __init__(self):

        # similar to root in other texts
        window = Tk()
        window.title("Image Metadata Entry")
        #setting root window and size
        window.minsize(width=400, height=600)

        heading_label = Label(window, bg="white", text="Image Metadata", font=("Times","24"))
        heading_label.pack()

        #INITIALIZATION VARIABLES
        #this variable stores whether the data has been validated or not
        self.ready_to_write = False
        #this will contain the list of all schools entered via the gui
        self.imagelist = []

        #creating label and field variable in GUI for each entry field
        image_ID_label = Label(window, text='Enter the Image ID:')
        image_ID_label.pack(anchor="c") #.pack() places the component in the window
        self.image_ID_field = Entry(window)
        self.image_ID_field.pack(anchor="c")

        filename_label = Label(window, text='Enter the image filename:')
        filename_label.pack()
        self.filename_field = Entry(window)
        self.filename_field.pack()

        #code for pulldown window
        extension_label = Label(window, text='Enter the image extension')
        extension_label.pack()
        self.extension_field = StringVar()
        self.extension_field.set("Please select an option") #Sets the default.
        OptionMenu(window, self.extension_field, ".jpg", ".jpeg", ".png", ".gif", ".tiff").pack()

        title_label = Label(window, text='Enter the image title:')
        title_label.pack()
        self.title_field = Entry(window)
        self.title_field.pack()

        owner_label = Label(window, text='Enter the image owner:')
        owner_label.pack()
        self.owner_field = Entry(window)
        self.owner_field.pack()

        #code for pulldown window
        licence_label = Label(window, text='Enter the image licence')
        licence_label.pack()
        self.licence_field = StringVar()
        self.licence_field.set("Please select an option") #Sets the default.
        OptionMenu(window, self.licence_field, "Commercial", "Non-Commercial", "Editing", "No Editing").pack()

        #code for pulldown window
        security_class_label = Label(window, text='Enter the image security class:')
        security_class_label.pack()
        self.security_class_field = StringVar()
        self.security_class_field.set("Please select an option") #Sets the default.
        OptionMenu(window, self.security_class_field, "Public", "Private", "Family", "Other").pack()



        #creates a button. The command function is run when the button is pressed
        #the 'command=self.doSubmit' is an example of a callback method
        button_validate_label = Label(window, text='Press to validate:')
        button_validate = Button(window, text='Submit', command=self.doSubmit)
        button_validate_label.pack()
        button_validate.pack()

        button_csv_label = Label(window, text='Convert Record to csv')
        button_csv = Button(window, text='write to csv', command=self.writetocsv)
        button_csv_label.pack()
        button_csv.pack()



        #waiting for user input - event driven program
        window.mainloop()


    def doSubmit(self):
        #test uniqueness of each imageID name entered u
        noduplicate = True;
        for image in self.imagelist:
            if self.image_ID_field.get() == image.get_image_ID():
                noduplicate= False
                tkinter.messagebox.showwarning('Warning!','Duplicate Image ID');
                print('Please enter the image ID again');


        if noduplicate == True:
        #this is the callback method for the 'Submit' button
            if len(self.image_ID_field.get()) <1 or len(self.filename_field.get()) <1 or len(self.extension_field.get()) <1 or len(self.title_field.get()) <1 or len(self.owner_field.get()) <1 or len(self.licence_field.get()) <1 or len(self.security_class_field.get()) <1 :
                    tkinter.messagebox.showwarning('Warning!','Please enter a value for all fields')
            else:
                try:
                    validated_image_ID = int(self.image_ID_field.get())

                    self.imagelist.append(Image(self.image_ID_field.get(), self.filename_field.get(), self.extension_field.get(), self.title_field.get(), self.owner_field.get(), self.licence_field.get(), self.security_class_field.get()))
                    self.ready_to_write= True
                    tkinter.messagebox.showinfo('Success','Submission Sucessful')

                    self.image_ID_field.delete(0, END) #command to clear field
                    self.filename_field.delete(0, END)
                    self.extension_field.set("Please select an option")
                    self.title_field.delete(0, END)
                    self.owner_field.delete(0, END)
                    self.licence_field.set("Please select an option")
                    self.security_class_field.set("Please select an option")

                except:
                    tkinter.messagebox.showwarning('Warning!','Please enter a numeric value for Image ID.')
                    print('Please enter a numeric value for Image ID.')


    def writetocsv(self):
        #this is the callback method for the 'write to csv' button
        import csv
        csv_name = 'image_metadata_database.csv'

        if self.ready_to_write: #cheacks data has been previously validated
            ofile = open(csv_name, 'w') #open with write('w') or append('a') privelages
            writer = csv.writer(ofile, delimiter=',')
            #cycles through list of records created by gui
            for image in self.imagelist:
                print(image.get_image_ID())
                writer.writerow([image.get_image_ID(),image.get_filename(), image.get_extension(), image.get_title(), image.get_owner(), image.get_licence(), image.get_security_class()])
            #explicitly closes the output file
            ofile.close()
        else:
            tkinter.messagebox.showwarning('Error!', 'You need to Validate your data')

        self.ready_to_write= False
        tkinter.messagebox.showinfo('Notice',csv_name+' File Generated Sucessfully')

#initialises the programme
GUI()
